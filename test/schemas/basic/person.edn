[^{:deprecation "This is a comment over an interface"
   :doc         "This is a comment over an interface"
   :interface   true
   :graphviz/color   "lightyellow"
   :datomic/tag true}
 Person
 [^{:type String
    :doc  "You can also document fields inside the interface"
    :interface true}
  name]

 ^{:implements       [Person]
   :graphviz/color   "navajowhite"
   :lacinia/resolver "resolve-name"
   :datomic/tag-recursive true}
 Employee
 [^Float              salary
  ^RelationshipStatus status
  ^Profession         profession
  ^{:type     Float
    :nullable true
    :doc      "Changes the salary of an employee"}
  changeSalary [^Float newSalary]
  ^{:type  String
    :cardinality [0 4]}
  friends
  ^{:type             String
    :lacinia/resolver "resolve-name"
    :graphql/resolver "resolve-name2"
    :doc              "This is a comment"
    :deprecation      "This was deprecated"}
  address
  ^{:type     Employee
    :cardinality    [0 n]}
  reportees]
 
 ^{:lacinia/identifier "query"
   :lacinia/tag-recursive {:except [hiddenMethod]}}
 QueryRoot
 [^UnionType unionQuery
  ^{:type  Person
    :cardinality [0 n]
    :doc   "This is a documentation inside a query field (with parenthesis in the comment)"}
  getFriends
  ^String hiddenMethod]

 ^{:lacinia/identifier "mutation"
   :doc                "This is a comment above a mutation ([]{-})"
   :graphviz/color     "aquamarine"
   :lacinia/tag-recursive {:only [mutation]}}
 MutationRoot
 [^{:type String
    :doc  "Test comment with special characters: (with [with {with ()}]){}[]...+-*/%&$#@!?"}
  mutation]

 ^{:lacinia/identifier "subscription"}
 SubscriptionRoot
 [^{:type String
    :cardinality [0 n]
    :lacinia {:stream "stream-messages"}}
  getMessages [^String roomId
               ^{:type ID
                 :optional true}
               optional-param]
  ^{:type String
    :cardinality [0 n]
    :lacinia {:stream "stream-logs"}}
  getLogs]

 ^{:graphviz/color "lightblue"
   :enum true
   :deprecation "This enum is also deprecated"
   :doc "This is a comment above an enum"}
 RelationshipStatus
 [Single Married]

 Profession
 [^String name]
 
 ^{:lacinia/identifier "union"
   :graphql/identifier "union"
   :union true
   :doc "This is an union type"}
 UnionType
 [Person Profession]]
